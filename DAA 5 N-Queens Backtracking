def solve_n_queens(n, first_queen_row, first_queen_col):
    # Helper function to check if it's safe to place a Queen at a given position (row, col)
    def is_safe(board, row, col):
        # Check columns in the current row
        for i in range(row):
            if board[i][col] == 'Q':
                return False

            # Check diagonals
            for j in range(n):
                if board[i][j] == 'Q' and (abs(i - row) == abs(j - col)):
                    return False

        return True

    # Helper function to print the chessboard
    def print_board(board):
        for row in board:
            print(' '.join(row))
        print()

    # Initialize the board with '.' for empty cells
    board = [['.' for _ in range(n)] for _ in range(n)]
    # Place the first Queen on the specified position
    board[first_queen_row][first_queen_col] = 'Q'

    # Recursive function to solve the n-Queens problem
    def solve(row):
        if row == n:
            # If all rows are filled, print the board and return
            print_board(board)
            return
        for col in range(n):
            if is_safe(board, row, col):
                # If it's safe to place a Queen, mark the cell as 'Q'
                board[row][col] = 'Q'
                # Recursively solve for the next row
                solve(row + 1)
                # Backtrack by marking the cell as '.'
                board[row][col] = '.'

    # Start solving from the row below the first Queen
    solve(first_queen_row + 1)

n = int(input("Enter the number of queens: "))
first_queen_row = int(input("Enter the row for the first queen (0-based index): "))
first_queen_col = int(input("Enter the column for the first queen (0-based index): "))

solve_n_queens(n, first_queen_row, first_queen_col)


#Output

Enter the number of queens: 6
Enter the row for the first queen (0-based index): 1
Enter the column for the first queen (0-based index): 1
. . . . . .
. Q . . . .
. . . Q . .
Q . . . . .
. . Q . . .
. . . . Q .

. . . . . .
. Q . . . .
. . . Q . .
. . . . . Q
Q . . . . .
. . Q . . .

. . . . . .
. Q . . . .
. . . Q . .
. . . . . Q
Q . . . . .
. . . . Q .

. . . . . .
. Q . . . .
. . . Q . .
. . . . . Q
. . Q . . .
. . . . Q .

. . . . . .
. Q . . . .
. . . . Q .
Q . . . . .
. . . . . Q
. . . Q . .

. . . . . .
. Q . . . .
. . . . Q .
. . Q . . .
Q . . . . .
. . . Q . .

. . . . . .
. Q . . . .
. . . . Q .
. . Q . . .
. . . . . Q
. . . Q . .

. . . . . .
. Q . . . .
. . . . . Q
Q . . . . .
. . Q . . .
. . . . Q .

. . . . . .
. Q . . . .
. . . . . Q
. . Q . . .
Q . . . . .
. . . Q . .


Time complexity: O(N!) :
The first queen has N placements, the second queen must not be in the same column as the first as well as at an oblique angle, so the second queen has N-1 possibilities. 

Space complexity is O(N^2) because it scales with the size of the chessboard, which is N x N.
