##Non-Recursive Approach with Execution Time

import time
start = time.time()
def fibonacci_iterative(n):
    if n <= 1:
        return n
    a, b = 0, 1
    for i in range(2, n + 1):
        a, b = b, a + b
    return b
n = int(input("Enter Number: "))
result = fibonacci_iterative(n)
print(f"The {n}th Fibonacci number is {result}.")
end = time.time()
print("Execution time is: {}ms".format((end-start)*10**3))

T.C.->O(n)
S.C.-> O(1)


##Recursive Approach with Execution Time

import time
start = time.time()
def fibonacci_recursive(n):
    if n <= 1:
        return n
    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)
n = int(input("Enter Number: "))
result = fibonacci_recursive(n)
print(f"The {n}th Fibonacci number is {result}.")
end = time.time()
print("Execution time is: {}ms".format((end-start)*10**3))

T.C.->O(2^n)
S.C.-> O(n)
