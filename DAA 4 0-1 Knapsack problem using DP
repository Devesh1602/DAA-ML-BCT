#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to solve the 0-1 Knapsack problem using dynamic programming.
int knapsackDP(int capacity, vector<int>& weights, vector<int>& values, int n) {
    // Create a 2D vector 'dp' to store intermediate results.
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    // Iterate over each item and knapsack capacity.
    for (int i = 1; i <= n; ++i) {
        for (int w = 1; w <= capacity; ++w) {
            if (weights[i - 1] <= w) {
                // If the current item's weight can be included, calculate the maximum value.
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            } else {
                // If the current item's weight exceeds the capacity, exclude it.
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // Return the maximum value that can be obtained with the given capacity.
    return dp[n][capacity];
}

int main() {
    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<int> weights(n);
    vector<int> values(n);

    // Input the values of items.
    cout << "Enter the values of items:\n";
    for (int i = 0; i < n; ++i) {
        cin >> values[i];
    }

    // Input the weights of items.
    cout << "Enter the weights of items:\n";
    for (int i = 0; i < n; ++i) {
        cin >> weights[i];
    }

    int capacity;
    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    // Call the knapsackDP function to calculate the maximum value.
    int max_value = knapsackDP(capacity, weights, values, n);

    // Output the result.
    cout << "The maximum value that can be obtained is: " << max_value << endl;

    return 0;
}

#output

Enter the number of items: 3
Enter the values of items:
150
112
95
Enter the weights of items:
25
29
20
Enter the capacity of the knapsack: 50
The maximum value that can be obtained is: 245

Time Complexity:
The time complexity of this dynamic programming algorithm is O(n * capacity), where 'n' is the number of items and 'capacity' is the capacity of the knapsack.

Space Complexity:
The space complexity is O(n * capacity) due to the two-dimensional array (dp) used for dynamic programming. The rest of the variables use constant space.
