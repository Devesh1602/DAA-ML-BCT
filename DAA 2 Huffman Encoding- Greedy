#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <map>

using namespace std;

// Structure to represent a node in the Huffman tree
struct HuffmanNode {
    char data;
    int freq;
    HuffmanNode* left;
    HuffmanNode* right;

    HuffmanNode(char data, int freq) : data(data), freq(freq), left(nullptr), right(nullptr) {}
};

// Comparison function for the priority queue
struct CompareHuffmanNode {
    bool operator()(HuffmanNode* a, HuffmanNode* b) {
        return a->freq > b->freq;
    }
};

// Function to build the Huffman tree
HuffmanNode* buildHuffmanTree(const string& text) {
    map<char, int> freqMap;
    for (char ch : text) {
        freqMap[ch]++;
    }

    priority_queue<HuffmanNode*, vector<HuffmanNode*>, CompareHuffmanNode> pq;
    for (const auto& pair : freqMap) {
        pq.push(new HuffmanNode(pair.first, pair.second));
    }

    while (pq.size() > 1) {
        HuffmanNode* left = pq.top();
        pq.pop();
        HuffmanNode* right = pq.top();
        pq.pop();
        HuffmanNode* parent = new HuffmanNode('\0', left->freq + right->freq);
        parent->left = left;
        parent->right = right;
        pq.push(parent);
    }

    return pq.top();
}

// Function to generate Huffman codes
void generateHuffmanCodes(HuffmanNode* root, string code, map<char, string>& huffmanCodes) {
    if (root) {
        if (root->data != '\0') {
            huffmanCodes[root->data] = code;
        }
        generateHuffmanCodes(root->left, code + "0", huffmanCodes);
        generateHuffmanCodes(root->right, code + "1", huffmanCodes);
    }
}

int main() {
    string text;
    cout << "Enter the text to be encoded: ";
    getline(cin, text);

    HuffmanNode* root = buildHuffmanTree(text);
    map<char, string> huffmanCodes;
    generateHuffmanCodes(root, "", huffmanCodes);

    cout << "Huffman Codes:\n";
    for (const auto& pair : huffmanCodes) {
        cout << pair.first << ": " << pair.second << endl;
    }

    return 0;
}


#OUTPUT

Enter the text to be encoded: aaabbccddeehhjk
Huffman Codes:
a: 00
b: 010
c: 100
d: 111
e: 110
h: 011
j: 1010
k: 1011


Time Complexity (tc):
Building the Huffman tree: O(n * log n), where n is the number of unique characters in the text. Constructing the priority queue with n nodes takes O(n * log n) time.
Generating Huffman codes: O(n), where n is the number of unique characters.


Space Complexity (sc):
The space complexity mainly depends on the number of unique characters and the depth of the Huffman tree. In the worst case, it is O(n) for the huffmanCodes map and the Huffman tree. Additionally, there is space required for the input text and various variables.
Overall, the time complexity is dominated by building the Huffman tree, which is O(n * log n), and the space complexity is O(n) in most cases.
